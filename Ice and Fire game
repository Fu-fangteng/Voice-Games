let angle1 = 0, angle2 = 0;
let speed = 5;
let distance = 100;
let pivotIsRed1 = true, pivotIsRed2 = true;
let tx1 = 250, ty1 = -250;
let tx2 = -250, ty2 = 250;
let xRed1, yRed1, xBlue1, yBlue1, xRed2, yRed2, xBlue2, yBlue2;
let gridSize = 100;
let rx1,rx2,ry1,ry2;
let positions = [];
let positions2 = [];
let countRed = 0;
let countGreen = 0;
let fulltime = 5; // 倒计时初始值 30 秒
let countdownActive = false; // 是否激活倒计时
let winner = ''; // 胜者信息
let startTime; // 记录倒计时开始的时间

function setup() {
  
  createCanvas(1000, 1000);
  angleMode(DEGREES);
  rectMode(CENTER);
}

function draw() {
  background(150);
  drawGrid();
  translate(width / 2, height / 2);

  for (let pos of positions) {
    push();
    translate(pos.x, pos.y);
    fill(pos.color);
    rect(0,0,80,80);
    pop();
    
   
  }
  
  push();
  translate(tx1, ty1);
  drawBalls(angle1, pivotIsRed1, true);
  calculateRealTimeCoordinates(true);
  pop();

  push();
  translate(tx2, ty2);
  
  drawBalls(angle2, pivotIsRed2, false);
  calculateRealTimeCoordinates(false);
  pop();
  noStroke();
  fill(25,16,110);
  textSize(16);
  text("Green squares: ",-windowWidth*3/8,height/7*3+20);
  text(countGreen,-windowWidth*3/8,height/7*3);
  text("Red squares: " ,windowWidth*3/12,-height/6.5*3);
  text(countRed,windowWidth*3/12,-height/6.5*3+20);
  
  
   if (countdownActive) {
        let elapsed = (millis() - startTime) / 1000;
        countdown = fulltime - elapsed;
        if (countdown <= 0) {
            countdown = 0;
            countdownActive = false; // 停止倒计时
            determineWinner(); // 判断胜者
        }
        displayCountdown();
     }
  displayScoresAndWinner();
  //console.log("Red squares: " + countRed);
  //console.log("Green squares: " + countGreen);
  //console.log(rx1);
}

function drawGrid() {
  stroke(200);
  for (let x = 0; x <= width; x += gridSize) {
    line(x, gridSize, x, height-gridSize);
  }
  for (let y = 0; y <= height; y += gridSize) {
    line(gridSize, y, width-gridSize, y);
  }
}

function drawBalls(angle, pivotIsRed, isFirstGroup) {
  let xRed, yRed, xBlue, yBlue;
  if (pivotIsRed) {
    xRed = -distance * cos(angle);
    yRed = -distance * sin(angle);
    xBlue = 0;
    yBlue = 0;
  } else {
    xBlue = distance * cos(angle);
    yBlue = distance * sin(angle);
    xRed = 0;
    yRed = 0;
  }
  fill(255, 0, 0);
  ellipse(xRed, yRed, gridSize/4, gridSize/4);
  fill(0, 0, 255);
  ellipse(xBlue, yBlue, gridSize/4, gridSize/4);
   

  
  if (isFirstGroup) {
    angle1 += speed;
    xRed1 = xRed; yRed1 = yRed;
    xBlue1 = xBlue; yBlue1 = yBlue;

  } else {
    angle2 += speed;
    xRed2 = xRed; yRed2 = yRed;
    xBlue2 = xBlue; yBlue2 = yBlue;
    
  }
}

function keyPressed() {
  if (keyCode === 76) { // A键控制第一组小球
    if (!countdownActive) {
        countdownActive = true;
        startTime = millis(); // 记录开始时间
    }
    if(rx1>gridSize && rx1 < width-gridSize && ry1>gridSize && ry1 < height-gridSize ){
    checkAndToggleRotation(1);
    addOrUpdateSquare(tx1, ty1, [144, 44, 65]);
    //positions.push({x: tx1, y: ty1, color:[144,44,65]});
  }
  }
    
  if (keyCode === 65) { // L键控制第二组小球
    if (!countdownActive) {
        countdownActive = true;
        startTime = millis(); // 记录开始时间
    }
    if(rx2>gridSize && rx2 < width-gridSize && ry2>gridSize && ry2 < height-gridSize ){
    checkAndToggleRotation(2);
        addOrUpdateSquare(tx2, ty2, [44, 144, 65]);
      //positions.push({x: tx2, y: ty2, color:[44,144,65]});
  
    }
  }
}

function checkAndToggleRotation(group) {
  let oldTx, oldTy, xRed, yRed, xBlue, yBlue, pivotIsRed;
  if (group === 1) {
    oldTx = tx1; oldTy = ty1;
    xRed = xRed1; yRed = yRed1;
    xBlue = xBlue1; yBlue = yBlue1;
    pivotIsRed = pivotIsRed1 = !pivotIsRed1;
  } else {
    oldTx = tx2; oldTy = ty2;
    xRed = xRed2; yRed = yRed2;
    xBlue = xBlue2; yBlue = yBlue2;
    pivotIsRed = pivotIsRed2 = !pivotIsRed2;
  }

  let gridX = Math.floor((oldTx + (pivotIsRed ? xBlue : xRed)) / gridSize) * gridSize + gridSize / 2;
  let gridY = Math.floor((oldTy + (pivotIsRed ? yBlue : yRed)) / gridSize) * gridSize + gridSize / 2;

  if (pivotIsRed) {
    tx = oldTx + (xBlue - xRed);
    ty = oldTy + (yBlue - yRed);
  } else {
    tx = oldTx + (xRed - xBlue);
    ty = oldTy + (yRed - yBlue);
  }

  if (group === 1) {
    tx1 = gridX; ty1 = gridY;
    circle(gridX,gridY,20);
  } else {
    tx2 = gridX; ty2 = gridY;
    circle(gridX,gridY,20);
  }
  //console.log(gridX)
  //console.log(gridY)
}

function calculateRealTimeCoordinates(isFirstGroup) {
  if (isFirstGroup) {
    if (pivotIsRed1) {
      rx1 = tx1 + xRed1 + width / 2;
      ry1 = ty1 + yRed1 + height / 2;
    } else {
      rx1 = tx1 + xBlue1 + width / 2;
      ry1 = ty1 + yBlue1 + height / 2;
    }
  } else {
    if (pivotIsRed2) {
      rx2 = tx2 + xRed2 + width / 2;
      ry2 = ty2 + yRed2 + height / 2;
    } else {
      rx2 = tx2 + xBlue2 + width / 2;
      ry2 = ty2 + yBlue2 + height / 2;
    }
  }
}

function addOrUpdateSquare(x, y, color) {
    let found = false;
    for (let i = 0; i < positions.length; i++) {
        if (positions[i].x === x && positions[i].y === y) {
            found = true;
            if (!arraysEqual(positions[i].color, color)) { // 如果位置相同但颜色不同
                // 更新计数器，减少旧颜色
                updateColorCount(positions[i].color, -1);
                // 增加新颜色
                updateColorCount(color, 1);
                // 更新颜色
                positions[i].color = color;
            }
            break;
        }
    }
    if (!found) { // 如果位置上没有方块
        positions.push({x: x, y: y, color: color});
        updateColorCount(color, 1); // 只有在添加新方块时增加计数
    }
}

function updateColorCount(color, increment) {
  if (color[0] === 144 && color[1] === 44 && color[2] === 65) {
    countRed += increment;  // 红色计数
  } else if (color[0] === 44 && color[1] === 144 && color[2] === 65) {
    countGreen += increment;  // 绿色计数
  }
}

// 比较两个颜色数组是否相等
function arraysEqual(a, b) {
  return a.length === b.length && a.every((val, index) => val === b[index]);
}

function displayCountdown() {
    fill(0);
    textSize(32);
    text("Time left: " + nf(countdown, 0, 2) + "s", -width / 2 + 20, -height / 2 + 50);
}

function determineWinner() {
     noLoop();
    background(111);
    if (countRed > countGreen) {
        winner = "Red wins!";
    } else if (countGreen > countRed) {
        winner = "Green wins!";
    } else {
        winner = "It's a tie!";
    }
}

function displayScoresAndWinner() {
    fill(134,123,32);
    textSize(36);
    if (winner !== '') {
        textSize(62);
        text(winner, -width/6, -height / 4);
    }
}
